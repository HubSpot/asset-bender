scalar Raw

# Why a module is included. The reverse of a dependency.
type ModuleReason {
  module: Module
  dependency: Dependency
}

type Loader {
  loader: String!
  options: Raw
}

type Module {
  identifier: String!

  # MD5 of the identifier.
  identifierHash: String!
  buildTimestamp: Raw
  resource: String
  context: String
  id: String
  dependencies: [Dependency!]!
  reasons: [ModuleReason!]!
  issuer: Module
  issuerStack: [Module!]!
  source: Source
  loaders: [Loader!]

  errors: [Error!]!
  errorCount: Int!
  warnings: [Error!]!
  warningCount: Int!
  chunks: [Chunk!]!
}

type SourceLocationRange {
  start: SourceLocation!
  end: SourceLocation!
}

type SourceLocation {
  line: Int!
  column: Int!
}

type Dependency {
  request: String
  type: String!
  loc: SourceLocationRange
  module: Module
}

# Source, including sourcemap
type Source {
  source: String
  size(limit: Int): Int!
  map: Raw
}

# A file generated by webpack
type Asset {
  name: String!
  source: Source!
}

type ChunkOrigin {
  name: String!
  module: Module!
}

type Chunk {
  id: Int!
  ids: [Int!]!
  files: [String!]!
  name: String
  entrypoints: [Module!]!
  origins: [ChunkOrigin!]!
  modules: [Module!]!
}

type Entrypoint {
  name: String!
  chunks: [Chunk!]!
}

type Stats {
  json: Raw!
  string(useColors: Boolean): String!
}

type Error {
  name: String
  message: String!
  details: String
  stack: String
  module: Module
}

# The webpack compilation
type Compilation {
  generation: Int!
  stats(preset: String): Stats!
  modules: [Module!]!
  module(identifier: String, identifierHash: String): Module
  assets: [Asset!]!
  asset(name: String): Asset
  chunks: [Chunk!]!
  entrypoints: [Entrypoint!]!
  children: [Compilation!]!
  fileDependencies: [String!]!
  contextDependencies: [String!]!
  entries: [Module!]!

  errors: [Error!]!
  errorCount: Int!
  warnings: [Error!]!
  warningCount: Int!
}

# The webpack compiler
type Compiler {
  # Indicates that the compiler is valid, that is, not currently compiling
  valid: Boolean!

  # The most recent compilation. Waits for current compilation to finish.
  compilation: Compilation!
}

type Query {
  compiler: Compiler!
}
